pipeline {
    agent any

    environment {
        IMAGE_NAME = "mudassirq692/cicd-tools"
        IMAGE_TAG = "latest"
        TIMESTAMP_TAG = "20250430-1"
        NEXUS_URL = "34.30.201.195:8083"
        NEXUS_REPO = "my-repo"
        GCR_REGION = "gcr.io"
        GCP_PROJECT = "lustrous-drake-412814"
        GKE_IMAGE = "${GCR_REGION}/${GCP_PROJECT}/${IMAGE_NAME}:${TIMESTAMP_TAG}"
        DEPLOYMENT_NAME = "cicd-deployment"
        K8S_NAMESPACE = "default"
    }

    stages {
        stage('Clone Repository') {
            steps {
                sh 'rm -rf CICD'
                sh 'git clone https://github.com/mudassiruddin-qazi/CICD.git'
                dir('CICD') {
                    sh 'git checkout main'
                }
            }
        }

        stage('Build and Push Images') {
            steps {
                script {
                    sh 'docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ./CICD'
                    sh 'docker push ${IMAGE_NAME}:${IMAGE_TAG}'

                    sh 'docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${NEXUS_URL}/repository/${NEXUS_REPO}/${IMAGE_NAME}:${TIMESTAMP_TAG}'
                    withCredentials([usernamePassword(credentialsId: 'nexus-docker-credentials', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        sh 'echo $NEXUS_PASS | docker login ${NEXUS_URL} -u $NEXUS_USER --password-stdin'
                        sh 'docker push ${NEXUS_URL}/repository/${NEXUS_REPO}/${IMAGE_NAME}:${TIMESTAMP_TAG}'
                    }

                    sh 'docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${GKE_IMAGE}'
                    withCredentials([file(credentialsId: 'gcp-service-account-key', variable: 'GCP_KEY')]) {
                        sh '''
                            gcloud auth activate-service-account --key-file=$GCP_KEY
                            gcloud auth configure-docker
                        '''
                        sh 'docker push ${GKE_IMAGE}'
                    }
                }
            }
        }

        stage('Deploy to GKE from GCR') {
            steps {
                withCredentials([file(credentialsId: 'gcp-service-account-key', variable: 'GCP_KEY')]) {
                    sh '''
                        set -e
                        gcloud auth activate-service-account --key-file=$GCP_KEY
                        gcloud config set project ${GCP_PROJECT}
                        gcloud container clusters get-credentials cluster-1 --zone us-central1-c --project ${GCP_PROJECT}

                        echo "Checking if deployment ${DEPLOYMENT_NAME} exists..."
                        if ! kubectl get deployment ${DEPLOYMENT_NAME} --namespace=${K8S_NAMESPACE}; then
                            echo "Creating deployment with image: ${GKE_IMAGE}"
                            kubectl create deployment ${DEPLOYMENT_NAME} --image=${GKE_IMAGE} --namespace=${K8S_NAMESPACE}
                        fi

                        echo "Getting actual container name from deployment..."
                        ACTUAL_CONTAINER=$(kubectl get deployment ${DEPLOYMENT_NAME} -o=jsonpath='{.spec.template.spec.containers[0].name}' --namespace=${K8S_NAMESPACE})

                        echo "Updating image for container $ACTUAL_CONTAINER in deployment ${DEPLOYMENT_NAME}"
                        kubectl set image deployment/${DEPLOYMENT_NAME} $ACTUAL_CONTAINER=${GKE_IMAGE} --namespace=${K8S_NAMESPACE}

                        echo "Waiting for rollout to complete..."
                        kubectl rollout status deployment/${DEPLOYMENT_NAME} --namespace=${K8S_NAMESPACE}
                    '''
                }
            }
        }
    }

    post {
        failure {
            echo '❌ Build or deployment failed.'
        }
        success {
            echo '✅ Image built, pushed, and deployed successfully.'
        }
    }
}
